# -*- coding: utf-8 -*-
"""生成式AI期末專案.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iiZeT9QnxUNUHYWftxhPWyTcZMiv2iNC
"""

!pip install ipywidgets

import ipywidgets as widgets
from IPython.display import display

"""# 先利用爬蟲抓取動物圖片和動物名字"""

import requests
ptt_url = "https://pngimg.com/images/animals/"

# 開始抓取
ptt_text = requests.get(ptt_url).text
print(ptt_text)

# 剖析抓到的原始資料
from bs4 import BeautifulSoup
import json

soup = BeautifulSoup(ptt_text, 'html.parser')

"""# 將動物名跟他的圖片連結做index"""

animal_list = []
for div in soup.find_all("div", class_="png_png"):
  #print(div)
  title=div.find("a")['title']
  link=div.find("img")['src']
  cleaned_title = title.split(' PNG')[0].split(' png')[0].split(' image')[0]
  print(cleaned_title)
  animal_list.append({
        'animal_name':cleaned_title,
        'link':link,
    })

animal_list

animal_names = [animal['animal_name'] for animal in animal_list]

!pip install diffusers

import torch
from diffusers import StableDiffusionPipeline
from PIL import Image
import requests
from io import BytesIO

# 加载预训练的Stable Diffusion模型
model_id = "CompVis/stable-diffusion-v1-4"
device = "cuda" if torch.cuda.is_available() else "cpu"
pipeline = StableDiffusionPipeline.from_pretrained(model_id)
pipeline = pipeline.to(device)

"""# 建立使用者下拉式選單，可選擇動物"""

dropdown1 = widgets.Dropdown(
    options=animal_names,
    description='Animal 1:',
    disabled=False,
)

dropdown2 = widgets.Dropdown(
    options=animal_names,
    description='Animal 2:',
    disabled=False,
)

# 創建用於顯示用戶選擇的輸出區域
output = widgets.Output()

# 定義按鈕的點擊事件
def on_button_clicked(b):
    with output:
        # 清空之前的輸出
        output.clear_output()
        # 獲取用戶選擇的動物名稱
        global user_animal_name
        user_animal_name = [dropdown1.value, dropdown2.value]
        # 顯示用戶選擇的動物名稱
        print("User selected animals:", user_animal_name)

# 創建按鈕
button = widgets.Button(
    description='Submit',
    disabled=False,
    button_style='',
    tooltip='Click me',
    icon='check'
)

# 綁定按鈕點擊事件
button.on_click(on_button_clicked)

# 顯示下拉選單和按鈕
display(dropdown1, dropdown2, button, output)

user_animal_name

link1 = None
link2 = None

for animal in animal_list:
    if animal['animal_name'] == user_animal_name[0]:
        link1 = animal['link']
        break
for animal in animal_list:
    if animal['animal_name'] == user_animal_name[1]:
        link2 = animal['link']
        break

# 輸出 link1
print("Link for animal_0:", link1)
print("Link for animal_1:", link2)

"""# 前處理和設定prompt"""

from PIL import Image, ImageFilter
response1 = requests.get(link1)
response2 = requests.get(link2)

image1 = Image.open(BytesIO(response1.content)).convert("RGB")
image2 = Image.open(BytesIO(response2.content)).convert("RGB")

# 将两张图片合并为一个输入
def combine_images(image1, image2):
    new_image = Image.new('RGB', (image1.width + image2.width, max(image1.height, image2.height)))
    new_image.paste(image1, (0, 0))
    new_image.paste(image2, (image1.width, 0))

    # 模糊中間的邊界
    mask = Image.new('L', new_image.size, 0)
    mask.paste(255, (image1.width - 10, 0, image1.width + 10, new_image.height))
    blurred_image = new_image.filter(ImageFilter.GaussianBlur(radius=10))
    new_image.paste(blurred_image, mask=mask)

    return new_image

combined_image = combine_images(image1, image2)

# 生成描述文本，描述融合后的图像
#prompt = "A seamless fusion of two animals, combining the features of both into one cohesive creature."
prompt="A fusion of "+ user_animal_name[0] +"and" +user_animal_name[1]+ ", featuring the body parts and distinct traits of both animals in a harmonious blend."
negative_prompt = "A split image with a clear line in the middle, disjointed features, two separate animals,A bad fusion of animals, unclear features, distorted image"

width = 512
height = 512
num_images_per_prompt = 1
num_inference_steps = 60
guidance_scale = 7.5

"""# 生成兩個動物融合的圖片

"""

with torch.autocast("cuda"):
    result = pipeline(
        prompt=prompt,
        negative_prompt=negative_prompt,
        init_image=combined_image,
        strength=0.75,
        guidance_scale=guidance_scale,
        width=width,
        height=height,
        num_images_per_prompt=num_images_per_prompt,
        num_inference_steps=num_inference_steps
    )

# 生成图像
#with torch.autocast("cuda"):
#    result = pipeline(prompt=prompt, init_image=combined_image, strength=0.75, guidance_scale=7.5)

# 保存并显示生成的图像
result_image = result.images[0]
result_image.save("fused_character.png")
result_image

